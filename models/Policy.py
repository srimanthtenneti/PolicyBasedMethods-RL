import numpy as np # For array operations
import matplotlib.pyplot as plt # Visulization tool

# Functions from the Pytorch API
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.distributions import Categorical

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Defining the Architecture for the policy
#_________________________________________

class Policy(nn.Module):
    def __init__(self,s_size=4,h_size=16,a_size=2):
        super(Policy,self).__init__()
        self.fc1 = nn.Linear(s_size , h_size) # Simple Neural Network
        self.fc2 = nn.Linear(h_size , a_size)
        
    def forward(self , x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.softmax(x , dim = 1)
      
    def act(self , state):
        state = torch.from_numpy(state).float().unsqueeze(0).to(device)
        probs = self.forward(state).cpu()
        m = Categorical(probs)
        action = m.sample()
        return action.item() , m.log_prob(action)

# Note :
#________

"""In the below act function we are running the state through the network
  then we are collecting the probability distribution generated by the network
  and apply the categorical function on it. Then we sample an action from the 
  distribution. At the end we return the action and the log prob of the action. """
